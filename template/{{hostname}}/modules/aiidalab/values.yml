proxy:
    secretToken: "{{ secret_token }}"
    https:
      enabled: {{ https_enabled | default(false) }}
      hosts:
        - "{{ hostname }}"
      letsencrypt:
        contactEmail: "{{ contact_email }}"
    service:
        annotations:
          "external-dns.alpha.kubernetes.io/hostname": "{{ hostname }}"

singleuser:
  image:
    name: "{{ image_name }}"
    tag: "{{ image_tag }}"
    pullPolicy: Always
{%- if aiidalab_default_apps %}
  extraEnv:
    AIIDALAB_DEFAULT_APPS: >-
      {{ aiidalab_default_apps.split() | join('\n') | indent(6) }}
{%- endif %}
  cmd: start-singleuser.sh
  storage:
    dynamic:
      storageClass: managed-premium

  memory:
    limit: 4G
    guarantee: 2G
  cpu:
    limit: 3.0
    guarantee: 1.0
  startTimeout: 600

hub:
  config:
    JupyterHub:
      authenticator_class: {{ authenticator_class }}
{%- if admin_users or allowed_users %}
    Authenticator:
{%- if admin_users %}
      admin_users:
{%- for user in admin_users.split() %}
        - {{ user }}
{%- endfor %}
{%- endif %}
{%- if allowed_users %}
      allowed_users:
{%- for user in allowed_users.split() %}
        - {{ user }}
{%- endfor %}
{%- endif %}
{%- endif %}
{%- if authenticator_class == "nativeauthenticator.NativeAuthenticator" %}
    NativeAuthenticator:
      ask_email_on_signup: {{ native_auth_ask_for_email }}
      check_common_password: {{ native_auth_check_common_password }}
      minimum_password_length: {{ native_auth_minimum_password_length }}
      open_signup: {{ native_auth_signup_admin_approval is false }}
{%- endif %}
{%- if authenticator_class == "github" %}
    GitHubOAuthenticator:
      client_id: "{{ gh_oauth_client_id }}"
      client_secret: "{{ gh_oauth_client_secret }}"
      oauth_callback_url: "https://{{ hostname }}/hub/oauth_callback"
      scope:
        - read:user
{%- if gh_oauth_allowed_organizations %}
        - read:org
{%- endif %}
{%- if gh_oauth_allowed_organizations %}
      allowed_organizations:
{%- for org in gh_oauth_allowed_organizations.split() %}
        - {{ org }}
{%- endfor %}
{%- endif %}
{%- endif %}
{%- if authenticator_class == "azuread" %}
    AzureAdOAuthenticator:
      client_id: "{{ azure_ad_client_id }}"
      client_secret: "{{ azure_ad_client_secret }}"
      tenant_id: "{{ azure_ad_tenant_id }}"
      oauth_callback_url: "https://{{ hostname }}/hub/oauth_callback"
{%- endif %}

  db:
    pvc:
      storageClassName: default

  extraConfig:
    myConfig: |
      # insert template path for custom login template
      c.JupyterHub.template_paths.insert(0, "/etc/jupyterhub/templates")

      # Override default logo
      import urllib.request
      urllib.request.urlretrieve("https://github.com/aiidalab/ansible-role-aiidalab-server/raw/master/files/aiidalab_wide.png", "aiidalab-logo.png")
      c.JupyterHub.logo_file = "aiidalab-logo.png"

scheduling:
  userPlaceholder:
    enabled: true
    replicas: 3
  userPods:
    nodeAffinity:
      # matchNodePurpose valid options:
      # - ignore
      # - prefer (the default)
      # - require
      matchNodePurpose: require

# removing inactive pods (=no response from the user's browser).
cull:
  enabled: true
  # timeout = 2h
  timeout: 7200
  # check every 10 minutes
  every: 600
